; Publist: publistadmin.ini  -- control the data input interface
; 
; The field structure of a reference as used by Publist is controlled by this
; file. 
;
; Copyright 2005 Stuart Prescott (publist@nanonanonano.net)
; This file is part of the Publist package (https://github.com/eitanf/publist) 
; and is distributed under the terms of the GNU General Public License

; ----------------- content -------------------
[Content]
; Display a link at the bottom of each page back to the Publist manual pages
show_version = true
; xml validator on the local machine (name and path to executable -- set to blank or false to disable)
; A good utility for this purpose is xmllint from the libxml2 package (
; (debian package: libxml2-utils, fedora package libxml2)
xml_lint_local = xmllint
; show link to xml validator at w3c? (only works if the xml file can be downloaded by the w3c servers, 
; so check both file permissions and firewall rules if this doesn't work out for you!)
xml_lint_w3c = true


; ----------------- input methods -------------------
[Add_Methods]
; show a field-by-field editor
fields = true
; parse bibtex input textarea
bibtex = true
; path to the bib2xml utility. Path should either be absolute or relative to the location
; of the php file being loaded by the browser (e.g. relative to admin/admin.php)
bib2xml = ../publist/bib2xml.pl
; parse formatted input textarea (for future use, not implemented)
formatted = false
; allow uploaded files
uploads = true

[Edit_Methods]
; show a field-by-field editor
fields = true
; bibtex edit textarea
bibtex = true
; abstract edit textarea
abstract = true
; regenerate bibtex files
bibgen = true
; edit uploaded files
uploads = true

; ----------------- fields ----------------------
; Control how the fields are displayed on the data entry form and how the data should be parsed
;
; EXAMPLE ENTRY:
; ; to define an XML tag 'sample'
; [Field_sample]
; ; name displayed on the form
; name = Sample field 
; ; required field (boolean, anything other than '0' (no quotes) is true, default false)
; required = true
; ; type of rendering for the field  (default text, alternatives: textarea, dropdown, checkbox)
; type = textarea
; ; text area size (default 8)
; size = 8
; ; does the entry have to be unique within the XML file (boolean, default false)
; unique = false
; ; create a quick select field (boolean, default false)
; quickselect = true
; ; from what types of reference should the quickselect be populated 
; ; (comma separated, default: all types of reference)
; qs_from_types = journal, thesis
; ; size of the quickselect box (1 is a dropdown box, default 8)
; qs_size = 8
; ; concatenate lines of textarea together with a string (omit to leave line separator in field)
; concatenate_lines = ""
; ; comma separated values for the checkbox type. (Format: on,off Default: true,false)
; ; It is best to put double quotes around these values
; checkbox_values = "1,0"
; ; default value for the field (default: depends on field type: checkbox=on,droplist=first,text=no default)
; ; Note that due to PHP's weird type handling, true must be expressed as "true" otherwise it will magically
; ; become "1" for you!
; default = 1

; this type is special: it is programatically filled with the acceptable values based on
; what the Publist class can parse
[Field_type]
name = Publication type
type = dropdown
required = true
default = journal

; the rest of the fields are not filled programatically
[Field_key]
name = Key
required = true
unique = true

[Field_author]
name = Authors
required = true
type = textarea
quickselect = true
concatenate_lines = " and "
onchange = pub_key_auto_create

[Field_title]
name = Title
required = false

[Field_booktitle]
name = Journal, Book title
required = false
quickselect = true
qs_from_types = journal
qs_size = 1

[Field_editor]
name = Editors
type = textarea
quickselect = true
concatenate_lines = " and "

[Field_publisher]
name = Publisher

[Field_pages]
name = Pages

[Field_volume]
name = Volume

[Field_issue]
name = Issue

[Field_month]
name = Month

[Field_year]
name = Year

[Field_area]
name = Area
quickselect = true
qs_size = 1

[Field_subarea]
name = Sub-area
quickselect = true
qs_size = 1

[Field_team]
name = Team publication
type = checkbox
checkbox_values = "true,false"
default = "true"


; ----------------- order of displayed fields ----------------------
; since this file will be merged with the custom ini file from the user, 
; which fields should actually be used must be defined somewhere, along with the
; order to use.
[Meta_Fields]
order = type year author title booktitle editor publisher pages volume issue month area subarea team key
preserve = 1


; ----------------- uploaded files ----------------------
; Control what sorts of files can be uploaded to the server as part of the data entry process
;
; EXAMPLE ENTRY:
; ; to define the upload type abstract
; [Upload_abstract]
; ; name displayed on the form
; name = "Abstract file (txt or html where possible)"
; ; directory into which the file should be uploaded (default: name of field)
; directory = abstracts
; ; automatically rename the uploaded file prepending the publication key (boolean, default true)
; autorename = true

[Upload_abstract]
name = "Abstract file (txt or html preferred)"
directory = "abstracts/"
default_ext = "txt"

[Upload_bibtex]
name = "BibTeX file"
directory = "bibtex/"
default_ext = "bib"

[Upload_papers]
name = "Paper"
directory = "papers/"

[Upload_talks]
name = "Presentation slides"
directory = "talks/"

[Upload_reviews]
name = "Review"
directory = "reviews/"

[Upload_source]
name = "Source file"
directory = "src/"


; ----------------- order of upload fields ----------------------
; since this file will be merged with the custom ini file from the user, 
; which fields should actually be used must be defined somewhere, along with the
; order to use.
[Meta_Uploads]
order = abstract bibtex papers talks reviews source
; maximum upload size (in bytes) -- advisory to browser not to try more. 
; Typically, PHP is configured to allow a maximum size of 2MB (2097152 bytes).
max_size = 2097152

; ----------------- keep backup copies ----------------------
; Should the admin functions keep backup copies of files that are edited or uploaded?
; Types of transactions that can be backed up are:  xml    upload    edit
; The file will be copied with .bak as the extension (pubs.xml  =>  pubs.xml.bak)
; A target directory can be specified instead of the current directory to keep the 
; filespace clean or to cope with permissions.
; Older backups can be preserved; in such cases -YYYYMMDD-HHMMSS is appended to the 
; backup filename.

[Backups]
; xml files
backup_xml = true
backup_xml_target = /tmp/
backup_xml_keepbackups = true

; uploaded files (Abstract, Slides etc)
backup_upload = true
backup_upload_target = /tmp/
backup_upload_keepbackups = true

; edited files (Abstract, BibTeX edited through the web form)
backup_edit = true
backup_edit_target = /tmp/
backup_edit_keepbackups = true

